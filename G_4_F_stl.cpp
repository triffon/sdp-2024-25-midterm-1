/***********************************************************************
 * Моля, преименувате файла, като:
 *   - замените G с групата, с която ходите на упражнения
 *   - замените F с вашия факултетен номер
 **********************************************************************/

/***********************************************************************
Задача 4. Иванчо много обича да гледа видеа в платформата MeTelly, но има
специални предпочитания: минава поред по видеата, които му предлага 
платформата, и след като изгледа първото видео, всяко следващо трябва да е с 
повече гледания от предишното, в противен случай го запазва накрая на списъка
си с видеа за по-късно и минава нататък. Ако се случи n последователни видеа
да няма следващо с по-висок брой гледания, на Иванчо му доскучава и спира да
гледа.
Да се реализира функция [опашка] watch(int n, [опашка] play, [опашка] later), 
която по подадена опашка от видеа за гледане play връща опашка последователно 
заглавията на гледаните от Иванчо видеа и записва в опашката later заглавията
на видеата, които е запазил за по-късно, в реда, в който ги е запазил.
Представянето на опашките и видеата в тях е по ваш избор.
Пример: watch(2, {{"APT",34}, {"Лeкция по СДП",2},{"Gangnam style",531},
{"Despacito",856}, {"Shape of you",634}, {"Baby",320}, {"Baby shark",1517}, 
later) ⇒ {"APT", "Gangnam style", "Despacito"}
В later се записват {"Лeкция по СДП", "Shape of you", "Baby"}
************************************************************************/

/***********************************************************************
 РЕШЕНИЕ:
************************************************************************/
#include <queue>
#include <string>

using Video = std::pair<std::string, int>;

std::queue<std::string> watch(int n, std::queue<Video> play, std::queue<std::string>& later) {
    std::queue<std::string> result;
    Video current = play.front();
    play.pop();
    Video last = current;
    result.push(current.first);
    int skipped = 0;
    
    while (!play.empty() && skipped < n) {
        current = play.front();
        play.pop();
        if (current.second > last.second) {
            result.push(current.first);
            skipped = 0;
        } else {
            later.push(current.first);
            ++skipped;
        }
        last = current;
    }
    
    return result;
}

/***********************************************************************
 КРАЙ НА РЕШЕНИЕТО
************************************************************************/

#define DOCTEST_CONFIG_IMPLEMENT
#include "doctest.h"

/***********************************************************************
  РАЗКОМЕНТИРАЙТЕ СЛЕДВАЩИЯ РЕД, ЗА ДА ВКЛЮЧИТЕ ТЕСТОВЕТЕ
************************************************************************/
#include "4_tests_stl.hpp"

int main () {
    // пускане на тестовете
    doctest::Context().run();
    return 0;
}